-- Parser 

import Ostap;
import Lexer;
import List;
import Fun;

-- A parser of "something" in brackets; l, r are left and right
-- brackets as parsers, p --- a parser of "something"
fun inbr (l, p, r) {
  syntax (-l p -r)
}

fun binop(op) {
  [ s(op), fun(l, _, r) { Binop(op, l, r) } ]
}

-- Primary expression
var primary = memo $ eta syntax (x=decimal {Const (stringInt (x))} |
                                 x=lident  {Var (x)}               |
                                 inbr[s("("), exp, s(")")]),
      exp = memo $ eta expr ({
        [Left,  { binop("&&"), binop("!!") }],
        [Nona, { binop("=="), binop("!="), binop("<"), binop(">"), binop("<="), binop(">=") }],
        [Left, { binop("+"), binop("-") }],
        [Left, {binop("*"), binop("/"), binop("%")}]
      }, primary);


var stmt = memo $ eta syntax (
    kSkip {Skip} |
    dest=lident s[":="] e=expr { Assn(dest, e) } |
    kRead name=inbr[s("("), lident, s(")")] { Read(name) } |
    kWrite name=inbr[s("("), lident, s(")")] { Write(name) } |
    left=stmt s[";"] right=stmt { Seq(left, right) }
);
   

-- Public top-level parser
public parse = stmt;
             
