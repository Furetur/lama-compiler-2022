-- Statement evaluator.

import State;
import Expr;
import World;

-- Evaluates a statement "stmt" in a configuration "c".
-- A configuration is a pair of a state "s" and a world "w".
-- Returns a final configuration (if any)
--
-- A statement is represented by a data structure of the following shape:
--
-- stmt = Assn    (string, expr)     |
--        Seq     (stmt, stmt)       |
--        Skip                       |
--        Read    (string)           |
--        Write   (expr)             |
--        If      (expr, stmt, stmt) |
--        While   (expr, stmt)       |
--        DoWhile (stmt, expr)

fun eval (c@[s, w], stmt) {
  case stmt of
    Assn (name, expr) -> [s <- [name, evalExpr(s, expr)], w]
  | Seq (s1, s2) -> eval(eval([s, w], s1), s2)
  | Skip -> [s, w]
  | Read (name) -> (
      var readResult = readWorld(w);
      var value = readResult[0];
      var newWorld = readResult[1];
      [s <- [name, value], newWorld]
    )
  | Write (expr) -> [s, writeWorld(evalExpr(s, expr), w)]
  | If (cond, thenStmt, elseStmt) -> if evalExpr(s, cond) then eval([s, w], thenStmt) else eval([s, w], elseStmt) fi
  | While (cond, body) -> if evalExpr(s, cond) then eval(eval([s, w], body), stmt) else [s, w] fi
  | DoWhile (body, cond) -> eval(eval ([s, w], body), While (cond, body))
  esac
}

-- Evaluates a program with a given input and returns an output
public fun evalStmt (input, stmt) {
  eval ([emptyState, createWorld (input)], stmt).snd.getOutput
}
